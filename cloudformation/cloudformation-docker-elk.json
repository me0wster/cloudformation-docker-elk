{
    "Parameters": {
        "InstanceType": {
            "Type": "String",
            "Default": "t2.small"
        },
        "KibanaSecurityGroup": {
            "Type": "String"
        },
        "ExtraSecurityGroups": {
            "Type": "String",
            "Default": ""
        },
        "Route53Zone": {
            "Type": "String"
        },
        "Subdomain": {
            "Type": "String",
            "Default": "elk"
        },
        "ElasticsearchInstanceCount": {
            "Type": "String",
            "Default": "2"
        },
        "ElasticsearchDedicatedMasterCount": {
            "Type": "String",
            "Default": "3"
        },
        "ElasticsearchInstanceType": {
            "Type": "String",
            "Default": "t2.small.elasticsearch"
        },
        "KeyName": {
            "Type": "String",
            "Default": ""
        },
        "S3Bucket": {
            "Type": "String",
            "Default": "my-logstash-bucket"
        },
        "S3ReadableBucketPattern": {
            "Type": "String",
            "Default": "*"
        },
        "DatadogAPIKey": {
            "Type": "String",
            "Default": ""
        },
        "ElasticsearchVolumeSize": {
            "Type": "String",
            "Default": "20"
        },
        "ElasticsearchVolumeType": {
            "Type": "String",
            "Default": "gp2"
        },
        "InstanceVolumeSize": {
            "Type": "String",
            "Default": "20"
        },
        "InstanceVolumeType": {
            "Type": "String",
            "Default": "gp2"
        },
        "GitRef": {
            "Type": "String",
            "Default": "master"
        }
    },

    "Mappings": {
        "InstanceTypeArchMap": {
            "t2.micro": {
                "Arch": "HVM64"
            },
            "t2.small": {
                "Arch": "HVM64"
            },
            "t2.medium": {
                "Arch": "HVM64"
            },
            "m3.large": {
                "Arch": "HVM64"
            },
            "c4.large": {
                "Arch": "HVM64"
            },
            "c4.4xlarge": {
                "Arch": "HVM64"
            },
            "r3.xlarge": {
                "Arch": "HVM64"
            }
        },
        "RegionArchMap": {
            "us-east-1": {
                "HVM64": "ami-9a562df2"
            },
            "us-west-2": {
                "HVM64": "ami-29ebb519"
            }
        }
    },

    "Resources": {
        "DockerElkElasticsearchDomain": {
            "Type": "AWS::Elasticsearch::Domain",
            "Properties": {
                "DomainName": {
                    "Ref": "AWS::StackName"
                },
                "ElasticsearchVersion": "5.1",
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeType": {
                        "Ref": "ElasticsearchVolumeType"
                    },
                    "VolumeSize": {
                        "Ref": "ElasticsearchVolumeSize"
                    }
                },
                "ElasticsearchClusterConfig": {
                    "InstanceCount": {
                        "Ref": "ElasticsearchInstanceCount"
                    },
                    "DedicatedMasterCount": {
                        "Ref": "ElasticsearchDedicatedMasterCount"
                    },
                    "InstanceType": {
                        "Ref": "ElasticsearchInstanceType"
                    }
                }
            }
        },
        "DockerElkInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroupIds": [{
                    "Ref": "KibanaSecurityGroup"
                }],
                "ImageId": {
                    "Fn::FindInMap": ["RegionArchMap", {
                        "Ref": "AWS::Region"
                    }, {
                        "Fn::FindInMap": ["InstanceTypeArchMap", {
                            "Ref": "InstanceType"
                        }, "Arch"]
                    }]
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "DockerElkInstanceProfile"
                },
                "BlockDeviceMappings": [{
                    "DeviceName": "/dev/sda1",
                    "Ebs": {
                        "VolumeSize": {
                            "Ref": "InstanceVolumeSize"
                        },
                        "VolumeType": {
                            "Ref": "InstanceVolumeType"
                        }
                    }
                }],
                "Tags": [{
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "app",
                        "Value": "docker-elk"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["\n", [
                            "#!/bin/bash -xe",
                            "# based on ubuntu cloudformation bootstrap from: https://gist.github.com/kixorz/10194688",

                            "apt-get update",
                            "mv /boot/grub/menu.lst /boot/grub/menu.lst.orig",
                            "apt-get -y upgrade",

                            "# Install bootstrap packages",
                            "apt-get install -y git python-setuptools curl apt-transport-https ca-certificates linux-image-extra-$(uname -r)",

                            "# Add docker key and repo",
                            "apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D",
                            "echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' > /etc/apt/sources.list.d/docker.list",
                            "apt-get update",
                            "apt-get install -y docker-engine",

                            "# Install docker-compose",
                            "curl -L https://github.com/docker/compose/releases/download/1.7.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose",
                            "chmod +x /usr/local/bin/docker-compose",

                            "# Install aws-cfn-bootstrap-latest from S3 tarball",
                            "mkdir aws-cfn-bootstrap-latest",
                            "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1",
                            "easy_install aws-cfn-bootstrap-latest",
                            "easy_install awscli",

                            "# Install cfn-hup service",
                            "cp /aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup",
                            "chmod 755 /etc/init.d/cfn-hup",

                            "# Run cfn-init to configure instance from CFN metadata",
                            {
                                "Fn::Join": [" ", [
                                    "/usr/local/bin/cfn-init -v",
                                    "--region", {
                                        "Ref": "AWS::Region"
                                    },
                                    "--stack", {
                                        "Ref": "AWS::StackName"
                                    },
                                    "--resource DockerElkInstance",
                                    "-c bootstrap"
                                ]]
                            },
                            "status=$?",
                            "echo $status > /var/log/cfn-init.result",

                            "# Send status notification from cfn-init",
                            {
                                "Fn::Join": [" ", [
                                    "/usr/local/bin/cfn-signal",
                                    "-e $status",
                                    "--region ", {
                                        "Ref": "AWS::Region"
                                    },
                                    "--stack ", {
                                        "Ref": "AWS::StackName"
                                    },
                                    "--resource DockerElkInstance "
                                ]]
                            }
                        ]]
                    }
                }
            },

            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": ["deploy"],
                        "bootstrap": ["cfn-bootstrap", "app-bootstrap", {
                            "ConfigSet": "default"
                        }]
                    },

                    "cfn-bootstrap": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": ["", [
                                        "[main]\n",
                                        "stack=", {
                                            "Ref": "AWS::StackId"
                                        }, "\n",
                                        "region=", {
                                            "Ref": "AWS::Region"
                                        }, "\n",
                                        "interval=1\n",
                                        "verbose=false\n"
                                    ]]
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": ["\n", [
                                        "[cfn-auto-reloader-hook]",
                                        "triggers=post.update",
                                        "path=Resources.DockerElkInstance.Metadata.AWS::CloudFormation::Init",
                                        {
                                            "Fn::Join": [" ", [
                                                "action=/usr/local/bin/cfn-init -v",
                                                "--region ", {
                                                    "Ref": "AWS::Region"
                                                },
                                                "--stack ", {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "--resource DockerElkInstance"
                                            ]]
                                        },
                                        "runas=root"
                                    ]]
                                }
                            }
                        }
                    },

                    "app-bootstrap": {
                        "commands": {
                            "00install-docker": {
                                "cwd": "/",
                                "command": "curl -sSL https://get.docker.com/ | sh"
                            },
                            "01clone-docker-elk": {
                                "cwd": "/",
                                "command": "git clone https://github.com/me0wster/cloudformation-docker-elk.git /opt/docker-elk"
                            }
                        }
                    },

                    "deploy": {
                        "commands": {
                            "deploy-docker-elk": {
                                "cwd": "/opt/docker-elk/",
                                "command": {
                                    "Fn::Join": [" ", [
                                        "git reset --hard HEAD && git clean -df && git fetch -a && git pull && git checkout",
                                        {
                                            "Ref": "GitRef"
                                        },
                                        "&& /bin/bash ./cloudformation/deploy.sh"
                                    ]]
                                },
                                "env": {
                                    "KIBANA_SECURITY_GROUP": {
                                        "Ref": "KibanaSecurityGroup"
                                    },
                                    "EXTRA_SECURITY_GROUPS": {
                                        "Ref": "ExtraSecurityGroups"
                                    },
                                    "ELASTICSEARCH_ARN": {
                                        "Fn::GetAtt": ["DockerElkElasticsearchDomain", "DomainArn"]
                                    },
                                    "ELASTICSEARCH_DOMAIN_NAME": {
                                        "Ref": "DockerElkElasticsearchDomain"
                                    },
                                    "ELASTICSEARCH_ENDPOINT": {
                                        "Fn::Join": ["", ["http://", {
                                            "Fn::GetAtt": ["DockerElkElasticsearchDomain", "DomainEndpoint"]
                                        }]]
                                    },
                                    "S3_BUCKET": {
                                        "Ref": "S3Bucket"
                                    },
                                    "DD_API_KEY": {
                                        "Ref": "DatadogAPIKey"
                                    },
                                    "STACK_NAME": {
                                        "Ref": "AWS::StackName"
                                    },
                                    "REGION": {
                                        "Ref": "AWS::Region"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },

        "DockerElkRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["ec2.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Policies": [{
                    "PolicyName": "DockerElkS3Policy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": ["ec2:Describe*", "ec2:ModifyInstanceAttribute"],
                                "Resource": "*"
                            },
                            {
                                "Effect": "Allow",
                                "Action": ["s3:Get*", "s3:List*"],
                                "Resource": [{
                                        "Fn::Join": ["", ["arn:aws:s3:::", {
                                            "Ref": "S3ReadableBucketPattern"
                                        }]]
                                    },
                                    {
                                        "Fn::Join": ["", ["arn:aws:s3:::", {
                                            "Ref": "S3ReadableBucketPattern"
                                        }, "/*"]]
                                    }
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Action": ["es:*"],
                                "Resource": [{
                                        "Fn::Join": ["", [{
                                            "Fn::GetAtt": ["DockerElkElasticsearchDomain", "DomainArn"]
                                        }, "/*"]]
                                    },
                                    {
                                        "Fn::Join": ["", [{
                                            "Fn::GetAtt": ["DockerElkElasticsearchDomain", "DomainArn"]
                                        }, "/"]]
                                    },
                                    {
                                        "Fn::Join": ["", [{
                                            "Fn::GetAtt": ["DockerElkElasticsearchDomain", "DomainArn"]
                                        }, ""]]
                                    }
                                ]
                            }
                        ]
                    }
                }],
                "Path": "/"
            }
        },

        "DockerElkInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "DockerElkRole"
                }]
            }
        },

        "DockerElkBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Ref": "S3Bucket"
                }
            }
        },

        "DockerElkExternalDNSRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Join": ["", [{
                        "Ref": "Route53Zone"
                    }, "."]]
                },
                "Name": {
                    "Fn::Join": ["", [{
                            "Ref": "Subdomain"
                        }, ".",
                        {
                            "Ref": "Route53Zone"
                        }, "."
                    ]]
                },
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [{
                    "Fn::GetAtt": ["DockerElkInstance", "PublicIp"]
                }]
            }
        },

        "DockerElkInternalDNSRecord": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Join": ["", [{
                        "Ref": "Route53Zone"
                    }, "."]]
                },
                "Name": {
                    "Fn::Join": ["", [{
                            "Ref": "Subdomain"
                        }, "-internal.",
                        {
                            "Ref": "Route53Zone"
                        }, "."
                    ]]
                },
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [{
                    "Fn::GetAtt": ["DockerElkInstance", "PrivateIp"]
                }]
            }
        }
    }
}
